{
    "name": "verbosefeedback",
    "displayName": "Verbose Feedback",
    "description": "An advanced, modern, static analysis extension for C/C++ that supports a number of back-end analyzer programs.",
    "author": {
        "name": "Dirk Vet"
    },
    "publisher": "dirkextension",
    "version": "1.11.0",
    "license": "MIT",
    "galleryBanner": {
        "color": "#303f9f",
        "theme": "dark"
    },
    "main": "./client/out/extension",
    "engines": {
        "vscode": "^1.52.0"
    },
    "categories": [
        "Programming Languages",
        "Linters"
    ],
    "keywords": [
        "c",
        "c++",
        "clang",
        "lint",
        "linter"
    ],
    "scripts": {
        "vscode:prepublish": "npm run webpack",
        "webpack": "npm run clean && webpack --mode production --config ./client/webpack.config.js && webpack --mode production --config ./server/webpack.config.js",
        "webpack:dev": "npm run clean && webpack --mode none --config ./client/webpack.config.js && webpack --mode none --config ./server/webpack.config.js",
        "compile": "npm run compile:server && npm run compile:client && npm run compile:specs",
        "compile:client": "tsc -b ./client/tsconfig.json",
        "compile:server": "tsc -b ./server/tsconfig.json",
        "compile:specs": "tsc -b ./specs/tsconfig.json",
        "watch": "tsc -b -w",
        "lint": "npm run lint:client && npm run lint:server && npm run lint:specs",
        "lint:client": "eslint --config ./client/.eslintrc.json ./client/src/*.ts",
        "lint:server": "eslint --config ./server/.eslintrc.json ./server/src/**/*.ts",
        "lint:specs": "eslint --config ./specs/.eslintrc.json ./specs/**/*.ts",
        "clean": "rimraf client/out && rimraf server/out && rimraf specs/out",
        "spec": "npm run compile && node specs/out/specs/runSpecs.js",
        "test": "npm run clean && npm run spec",
        "postinstall": "cd client && npm install && cd ../server && npm install && cd .."
    },
    "jest": {
        "preset": "ts-jest",
        "verbose": true,
        "testEnvironment": "vscode",
        "testMatch": [
            "**/*.spec.ts"
        ],
        "testPathIgnorePatterns": [
            "out",
            "sample",
            "dist",
            ".vscode-test"
        ]
    },
    "extensionDependencies": [
        "ms-vscode.cpptools"
    ],
    "devDependencies": {
        "@jest/test-result": "^26.6.2",
        "@types/jest": "^26.0.20",
        "@types/lodash": "^4.14.168",
        "@types/mock-fs": "^4.13.0",
        "@types/node": "^13.13.40",
        "@types/tmp": "^0.2.0",
        "@types/vscode": "^1.52.0",
        "@typescript-eslint/eslint-plugin": "^4.9.1",
        "@typescript-eslint/parser": "^4.9.1",
        "@vscode/test-electron": "^1.6.2",
        "eslint": "^7.32.0",
        "jest": "^27.3.1",
        "jest-cli": "^27.3.1",
        "jest-environment-vscode": "^1.0.0",
        "merge-options": "^3.0.4",
        "mock-fs": "^4.13.0",
        "rimraf": "^3.0.2",
        "source-map-support": "^0.5.16",
        "ts-jest": "^27.0.7",
        "ts-loader": "^8.0.11",
        "typescript": "^4.1.2",
        "vscode-test": "^1.5.0",
        "webpack": "^5.10.0",
        "webpack-cli": "^4.2.0"
    },
    "dependencies": {
        "cross-spawn": "^7.0.3",
        "fast-glob": "^3.2.5",
        "lodash": "^4.17.21",
        "slash": "^3.0.0",
        "tmp": "^0.2.1",
        "var-expansion": "^0.1.0",
        "vscode-languageclient": "^7.0.0",
        "vscode-languageserver": "^7.0.0",
        "vscode-uri": "^3.0.2",
        "which": "^2.0.2"
    },
    "activationEvents": [
        "onCommand:verbosefeedback.analyzeActiveDocument",
        "onLanguage:c",
        "onLanguage:cpp"
    ],
    "contributes": {
        "commands": [
            {
                "command": "verbosefeedback.analyzeActiveDocument",
                "title": "Verbose Feedback: Analyze the active document"
            },
            {
                "command": "verbosefeedback.gccRuntimeDocument",
                "title": "Verbose Feedback: Check for GCC runtime errors/warnings."
            },
            {
                "command": "verbosefeedback.gccCompileDocument",
                "title": "Verbose Feedback: Compile/link the active document with GCC."
            },
            {
                "command": "verbosefeedback.clangCompileDocument",
                "title": "Verbose Feedback: Compile/link the active document with Clang."
            },
            {
                "command": "verbosefeedback.clangRuntimeDocument",
                "title": "Verbose Feedback: Check for Clang runtime errors/warnings."
            },
            {
                "command": "verbosefeedback.feedbackClangCompiler",
                "title": "Verbose Feedback: Switch on/off Clang compiler with feedback."
            },
            {
                "command": "verbosefeedback.buildFile",
                "title": "Verbose Feedback: Compile and run the program."
            },
            {
                "command": "verbosefeedback.clearErrors",
                "title": "Verbose Feedback: Clear all errors by reloading the window."
            },
            {
                "command": "verbosefeedback.workspace.isTrusted.toggle",
                "title": "Verbose Feedback: Toggle Workspace Trust Flag",
                "description": "Toggle the workspace trust flag. Workspace settings that determine tool locations are disabled by default in untrusted workspaces."
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Verbose Feedback configuration",
            "properties": {
                "verbosefeedback.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable all linting"
                },
                "verbosefeedback.debug": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable verbose debug logging"
                },
                "verbosefeedback.run": {
                    "type": "string",
                    "enum": [
                        "onSave",
                        "onType",
                        "onBuild"
                    ],
                    "default": "onType",
                    "description": "Run the linter upon typing (onType), upon a build task (onBuild), or upon file save (onSave)."
                },
                "verbosefeedback.ignoreParseErrors": {
                    "type": "boolean",
                    "default": false,
                    "description": "Ignore when the extension can't parse a line of the linter."
                },
                "verbosefeedback.excludeFromWorkspacePaths": {
                    "type": "array",
                    "default": [],
                    "description": "A list of paths within the workspace for which no analyses/diagnostics will be displayed."
                },
                "verbosefeedback.language": {
                    "type": "string",
                    "default": "c++",
                    "enum": [
                        "c",
                        "c++"
                    ],
                    "description": "Force to check all files as the given language. Cascades to all analyzers unless overridden in one or more analyzers."
                },
                "verbosefeedback.standard": {
                    "type": "array",
                    "default": [
                        "c11",
                        "c++11"
                    ],
                    "description": "The language standards to check against. Cascades to all analyzers unless overridden in one or more analyzers."
                },
                "verbosefeedback.defines": {
                    "type": "array",
                    "default": [],
                    "description": "Preprocessor symbols to define. Cascades to all analyzers unless overridden in one or more analyzers. If not specified it uses \"C_Cpp.default.defines\" or \"defines\" from c_cpp_properties.json"
                },
                "verbosefeedback.undefines": {
                    "type": "array",
                    "default": [],
                    "description": "Preprocessor symbols to undefine. Cascades to all analyzers unless overridden in one or more analyzers."
                },
                "verbosefeedback.includePaths": {
                    "type": "array",
                    "default": [],
                    "description": "Paths to search for include files. They may be relative or absolute. Cascades to all analyzers unless overridden in one or more analyzers. If not specified it uses \"C_Cpp.default.includePath\" or \"includePath\" from c_cpp_properties.json"
                },
                "verbosefeedback.clang.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the Clang linter"
                },
                "verbosefeedback.clang.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using Clang",
                    "default": "clang"
                },
                "verbosefeedback.clang.configFile": {
                    "type": "string",
                    "description": "A .clang_complete file to use/fallback to if no config file is found in the current project",
                    "default": ".clang_complete"
                },
                "verbosefeedback.clang.includePaths": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Paths to search for include files. They may be relative or absolute. If not specified it falls back to \"verbosefeedback.includePaths\""
                },
                "verbosefeedback.clang.standard": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "The language standards to check against. For example, one or more of: posix, c89, c99, c11, c17, c18, c++03, c++11, c++14, c++17, c++20."
                },
                "verbosefeedback.clang.defines": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Preprocessor symbols to define. If not specified it falls back to \"verbosefeedback.defines\""
                },
                "verbosefeedback.clang.undefines": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Preprocessor symbols to undefine."
                },
                "verbosefeedback.clang.language": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Force Clang to check all files as the given language."
                },
                "verbosefeedback.clang.extraArgs": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Extra verbatim command-line arguments to include on the Clang command-line invocation."
                },
                "verbosefeedback.clang.warnings": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": [
                        "all",
                        "extra"
                    ],
                    "description": "Warnings to include in the analysis. Default is everything possible."
                },
                "verbosefeedback.clang.includes": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "An array of files to directly include with every processed file. Operates via utilizing Clang's -include parameter."
                },
                "verbosefeedback.clang.standardLibs": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "The standard libraries to utilize. Operates via utilizing Clang's -stdlib parameter. Some macOS and BSD systems need to use a special library for C++11 support."
                },
                "verbosefeedback.clang.pedantic": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the -pedantic command-line argument to Clang."
                },
                "verbosefeedback.clang.pedanticErrors": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the -pedantic-errors command-line argument to Clang."
                },
                "verbosefeedback.clang.msExtensions": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the -fms-extensions command-line argument to Clang."
                },
                "verbosefeedback.clang.noExceptions": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the -fno-exceptions command-line argument to Clang."
                },
                "verbosefeedback.clang.noRtti": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the -fno-rtti command-line argument to Clang."
                },
                "verbosefeedback.clang.blocks": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the -fblocks command-line argument to Clang."
                },
                "verbosefeedback.clang.severityLevels": {
                    "type": "object",
                    "description": "Maps the severity levels of Clang to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
                    "default": {
                        "fatal": "Error",
                        "error": "Error",
                        "warning": "Warning",
                        "note": "Information"
                    },
                    "properties": {
                        "fatal": {
                            "description": "Used when very major issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "error": {
                            "description": "Used when major issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "warning": {
                            "description": "Suggestions about defensive programming to prevent potential issues.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "note": {
                            "description": "Suggestions about (possibly) minor issues.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        }
                    }
                },
                "verbosefeedback.cppcheck.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the CppCheck linter"
                },
                "verbosefeedback.cppcheck.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using CppCheck",
                    "default": "cppcheck"
                },
                "verbosefeedback.cppcheck.extraArgs": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Extra verbatim command-line arguments to include on the cppcheck command-line invocation."
                },
                "verbosefeedback.cppcheck.configFile": {
                    "type": "string",
                    "description": "A .clang_complete file to use/fallback to if no config file is found in the current project",
                    "default": ".clang_complete"
                },
                "verbosefeedback.cppcheck.includePaths": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Paths to search for include files. They may be relative or absolute. If not specified it falls back to \"verbosefeedback.includePaths\""
                },
                "verbosefeedback.cppcheck.platform": {
                    "type": "string",
                    "enum": [
                        "avr8",
                        "unix32",
                        "unix64",
                        "win32A",
                        "win32W",
                        "win64",
                        "native"
                    ],
                    "default": "native",
                    "description": "The platform used for types and sizes."
                },
                "verbosefeedback.cppcheck.standard": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "The language standards to check against. Can be one or more of: posix, c89, c99, c11, c17, c18, c++03, c++11, c++14, c++17, c++20."
                },
                "verbosefeedback.cppcheck.defines": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Preprocessor symbols to define. If not specified it falls back to \"verbosefeedback.defines\""
                },
                "verbosefeedback.cppcheck.undefines": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": null,
                    "description": "Preprocessor symbols to undefine."
                },
                "verbosefeedback.cppcheck.suppressions": {
                    "type": "array",
                    "default": [],
                    "description": "Warnings to suppress. Refer to the CppCheck documentation for what to supply here."
                },
                "verbosefeedback.cppcheck.addons": {
                    "type": "array",
                    "default": [],
                    "description": "Addons to use with cppcheck. For example, misra, cert, etc. Refer to the CppCheck documentation for what to supply here."
                },
                "verbosefeedback.cppcheck.verbose": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to enable verbose output from CppCheck."
                },
                "verbosefeedback.cppcheck.language": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Force CppCheck to check all files as the given language."
                },
                "verbosefeedback.cppcheck.inconclusive": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allow reporting even though analysis is inconclusive. May lead to false positives."
                },
                "verbosefeedback.cppcheck.force": {
                    "type": "boolean",
                    "default": false,
                    "description": "Controls whether CppCheck enumerates all possible configurations."
                },
                "verbosefeedback.cppcheck.severityLevels": {
                    "type": "object",
                    "description": "Maps the severity levels of CppCheck to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
                    "default": {
                        "error": "Error",
                        "warning": "Warning",
                        "style": "Information",
                        "performance": "Information",
                        "portability": "Information",
                        "information": "Information"
                    },
                    "properties": {
                        "error": {
                            "description": "Used when major issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "warning": {
                            "description": "Suggestions about defensive programming to prevent potential issues.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "style": {
                            "description": "Stylistic issues related to code cleanup such as unused functions, redundant code, constness, etc.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "performance": {
                            "description": "Suggestions for making the code faster. These suggestions only and may not increase execution speed.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "portability": {
                            "description": "Warnings about 64-bit and compiler portability.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "information": {
                            "description": "Minor issues that do not fit into other categories.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        }
                    }
                },
                "verbosefeedback.flexelint.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the Flexelint linter"
                },
                "verbosefeedback.flexelint.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using Flexelint",
                    "default": "flexelint"
                },
                "verbosefeedback.flexelint.configFile": {
                    "type": "string",
                    "description": "A .flexelint.rc file to use/fallback to if no config file is found in the current project",
                    "default": ".flexelint.lnt"
                },
                "verbosefeedback.flexelint.headerArgs": {
                    "type": "array",
                    "description": "A list of arguments passed to Flexelint when scanning header source files",
                    "default": [
                        "-e749",
                        "-e750",
                        "-e751",
                        "-e752",
                        "-e753",
                        "-e754",
                        "-e1526",
                        "-e1714"
                    ]
                },
                "verbosefeedback.flexelint.severityLevels": {
                    "type": "object",
                    "description": "Maps the severity levels of Flexelint to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
                    "default": {
                        "Error": "Error",
                        "Warning": "Warning",
                        "Info": "Information",
                        "Note": "Hint"
                    },
                    "properties": {
                        "Error": {
                            "description": "Used when major issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "Warning": {
                            "description": "Suggestions about defensive programming to prevent potential issues.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "Info": {
                            "description": "Suggestions for producing better code.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "Note": {
                            "description": "Suggestions for producing better code.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        }
                    }
                },
                "verbosefeedback.pclintplus.enable": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable or disable the PC-lint Plus linter"
                },
                "verbosefeedback.pclintplus.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using PC-lint Plus",
                    "default": "pclp"
                },
                "verbosefeedback.pclintplus.configFile": {
                    "type": "string",
                    "description": "A PC-lint Plus file to use/fallback to if no config file is found in the current project",
                    "default": ".pclint.lnt"
                },
                "verbosefeedback.pclintplus.headerArgs": {
                    "type": "array",
                    "description": "A list of arguments passed to PC-lint Plus when scanning header source files",
                    "default": []
                },
                "verbosefeedback.pclintplus.severityLevels": {
                    "type": "object",
                    "description": "Maps the severity levels of PC-lint Plus to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
                    "default": {
                        "error": "Error",
                        "warning": "Warning",
                        "info": "Information",
                        "note": "Hint"
                    },
                    "properties": {
                        "error": {
                            "description": "Used when major issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "warning": {
                            "description": "Suggestions about defensive programming to prevent potential issues.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "info": {
                            "description": "Suggestions for producing better code.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "note": {
                            "description": "Suggestions for producing better code.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "supplemental": {
                            "description": "Suggestions for producing better code.",
                            "type": "string",
                            "default": "Hint",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        }
                    }
                },
                "verbosefeedback.flawfinder.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the FlawFinder linter"
                },
                "verbosefeedback.flawfinder.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using FlawFinder",
                    "default": "flawfinder"
                },
                "verbosefeedback.flawfinder.severityLevels": {
                    "type": "object",
                    "description": "Maps the severity levels of CppCheck to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
                    "default": {
                        "0": "Information",
                        "1": "Warning",
                        "2": "Warning",
                        "3": "Warning",
                        "4": "Warning",
                        "5": "Error"
                    },
                    "properties": {
                        "0": {
                            "description": "Used when lv 0 issues are found.",
                            "type": "string",
                            "default": "Information",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "1": {
                            "description": "Used when lv 1 issues are found.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "2": {
                            "description": "Used when lv 2 issues are found.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "3": {
                            "description": "Used when lv 3 issues are found.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "4": {
                            "description": "Used when lv 4 issues are found.",
                            "type": "string",
                            "default": "Warning",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        },
                        "5": {
                            "description": "Used when lv 5 issues are found.",
                            "type": "string",
                            "default": "Error",
                            "enum": [
                                "Error",
                                "Warning",
                                "Hint",
                                "Information",
                                "None"
                            ]
                        }
                    }
                },
                "verbosefeedback.lizard.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable the lizard linter"
                },
                "verbosefeedback.lizard.executable": {
                    "type": "string",
                    "description": "This option allows you to override the executable called when using lizard",
                    "default": "lizard"
                }
            }
        }
    }
}