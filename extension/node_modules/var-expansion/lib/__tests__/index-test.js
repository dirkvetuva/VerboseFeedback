'use strict';

var _ = require('../');

describe('Variables substitution', function () {
  'use strict';

  var line0 = 'la vispa ${name} altro testo $BOH noo$questoXX prova${A}aa';
  var env = {
    name: 'ciccio',
    questoXX: 'aahhh',
    BOH: 1,
    PWD: '/Users/andreax',
    '?': 0,
    f: function f() {
      return 295;
    },
    $: 12345
  };

  it('should accept empty environ', function () {
    var _substituteVariables = (0, _.substituteVariables)(line0, {}),
        value = _substituteVariables.value,
        error = _substituteVariables.error;

    expect(value).toEqual('la vispa  altro testo  noo provaaa');
    expect(error).toBeFalsy();
  });

  it('should accept empty strings', function () {
    var _substituteVariables2 = (0, _.substituteVariables)('', {}),
        value = _substituteVariables2.value,
        error = _substituteVariables2.error;

    expect(value).toEqual('');
    expect(error).toBeFalsy();
  });

  it('should substitute a var', function () {
    var _substituteVariables3 = (0, _.substituteVariables)(line0, { env: { BOH: 1 } }),
        value = _substituteVariables3.value,
        error = _substituteVariables3.error;

    expect(value).toEqual('la vispa  altro testo 1 noo provaaa');
  });

  it('should substitute multiple vars', function () {
    var _substituteVariables4 = (0, _.substituteVariables)(line0, { env: env }),
        value = _substituteVariables4.value,
        error = _substituteVariables4.error;

    expect(value).toEqual('la vispa ciccio altro testo 1 nooaahhh provaaa');
  });

  it('should substitute ${BOH}', function () {
    var _substituteVariables5 = (0, _.substituteVariables)('${BOH}', { env: env }),
        value = _substituteVariables5.value,
        error = _substituteVariables5.error;

    expect(value).toEqual('1');
  });

  it('should substitute $BOH', function () {
    var _substituteVariables6 = (0, _.substituteVariables)('$BOH', { env: env }),
        value = _substituteVariables6.value,
        error = _substituteVariables6.error;

    expect(value).toEqual('1');
  });

  it('should raise error ${BOH', function () {
    var _substituteVariables7 = (0, _.substituteVariables)('${BOH', { env: env }),
        value = _substituteVariables7.value,
        error = _substituteVariables7.error;

    expect(error).toEqual({
      message: 'unexpected EOF while looking for matching }',
      position: 0
    });
  });

  it('should preserve spaces', function () {
    var _substituteVariables8 = (0, _.substituteVariables)(' $BOH ', { env: { BOH: 'abc' } }),
        value = _substituteVariables8.value,
        error = _substituteVariables8.error;

    expect(value).toEqual(' abc ');
  });

  it('should preserve $', function () {
    var _substituteVariables9 = (0, _.substituteVariables)('$ ${} $', {}),
        value = _substituteVariables9.value,
        error = _substituteVariables9.error;

    expect(value).toEqual('$ ${} $');
  });

  it('should substite $PWD/test', function () {
    var _substituteVariables10 = (0, _.substituteVariables)('$PWD/test', { env: env }),
        value = _substituteVariables10.value,
        error = _substituteVariables10.error;

    expect(value).toEqual('/Users/andreax/test');
  });

  it('should expand ${PWD:+ciccio}', function () {
    var _substituteVariables11 = (0, _.substituteVariables)('${PWD:+ciccio}', { env: env }),
        value = _substituteVariables11.value,
        error = _substituteVariables11.error;

    expect(value).toEqual('ciccio');
  });

  it('should expand ${AAA:+bla}', function () {
    var _substituteVariables12 = (0, _.substituteVariables)('${AAA:+bla}', { env: env }),
        value = _substituteVariables12.value,
        error = _substituteVariables12.error;

    expect(value).toEqual('');
  });

  it('should expand ${PWD:-ciccio}', function () {
    var _substituteVariables13 = (0, _.substituteVariables)('${PWD:-ciccio}', { env: env }),
        value = _substituteVariables13.value,
        error = _substituteVariables13.error;

    expect(value).toEqual('/Users/andreax');
  });

  it('should expand ${AAA:-bla}', function () {
    var _substituteVariables14 = (0, _.substituteVariables)('${AAA:-bla}', { env: env }),
        value = _substituteVariables14.value,
        error = _substituteVariables14.error;

    expect(value).toEqual('bla');
  });

  it('should expand ${PWD:#} ${BBB:#}', function () {
    var _substituteVariables15 = (0, _.substituteVariables)('${PWD:#} ${BBB:#}', { env: env }),
        value = _substituteVariables15.value,
        error = _substituteVariables15.error;

    expect(value).toEqual('14 0');
  });

  it('should expand ${NEWVAR} ${NEWVAR:=newval} ${NEWVAR} ${NEWVAR:=oldval}', function () {
    var _substituteVariables16 = (0, _.substituteVariables)('${NEWVAR} ${NEWVAR:=newval} ${NEWVAR} ${NEWVAR:=oldval}', {
      env: env
    }),
        value = _substituteVariables16.value,
        error = _substituteVariables16.error;

    expect(value).toEqual(' newval newval newval');
  });

  it('should expand ${NEWVARx:?} 1 2 3', function () {
    var _substituteVariables17 = (0, _.substituteVariables)('${NEWVARx:?} 1 2 3', { env: env }),
        value = _substituteVariables17.value,
        error = _substituteVariables17.error;

    expect(error).toEqual({ message: 'NEWVARx: parameter null or not set' });
  });

  it('should expand ${NEWVARx:?has not been set} 1 2 3', function () {
    var _substituteVariables18 = (0, _.substituteVariables)('${NEWVARx:?has not been set} 1 2 3', {
      env: env
    }),
        value = _substituteVariables18.value,
        error = _substituteVariables18.error;

    expect(error).toEqual({ message: 'NEWVARx: has not been set' });
  });

  it('should execute functions', function () {
    var _substituteVariables19 = (0, _.substituteVariables)('${f}', { env: env }),
        value = _substituteVariables19.value,
        error = _substituteVariables19.error;

    expect(value).toEqual('295');
  });

  it('should expand $? $$', function () {
    var _substituteVariables20 = (0, _.substituteVariables)('$? $$', {
      env: env,
      specialVars: ['$', '?']
    }),
        value = _substituteVariables20.value,
        error = _substituteVariables20.error;

    expect(value).toEqual('0 12345');
  });

  it('should accept function as env', function () {
    var _env = {
      A: 1,
      B: 2
    };

    var _substituteVariables21 = (0, _.substituteVariables)('$A + $B = 3', {
      env: function env(name) {
        return _env[name];
      }
    }),
        value = _substituteVariables21.value,
        error = _substituteVariables21.error;

    expect(value).toEqual('1 + 2 = 3');
  });
}); /*
     * Copyright (c) 2015, Andrea Bonomi <andrea.bonomi@gmail.com>
     *
     * Permission to use, copy, modify, and/or distribute this software for
     * any purpose with or without fee is hereby granted, provided that the
     * above copyright notice and this permission notice appear in all copies.
     *
     * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
     * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     *
     * 
     */
